{"pages":[{"title":"Who am I ?","text":"Who Are You?My name is Waris Radji, I’m 19 years old, and I presently learning computer science at Université de Paris 13. I have been working at Laboratoire Scientifique de Paris Nord (LIPN - CNRS) as a Scala Developer to implement an unsupervised learning algorithm in the Clustering4Ever library. I’m also a high-level Street Lifting athlete in the Fundamental Strength Project (FSP) team. My goal is to become a doctor in Machine Learning. This is my first blog and I hope you will like it.Why Are You Blogging?I think that knowledge is some things that have to be shared to permit our entire community to evolve. As a very large consumer of blog posts, I feel I even have to share. The best way to know if you have understood a concept is to see if you can explain it.What Are You Going To Be Blogging About?Even if this blog will principally deal with Data Science, Procedural Generation and Programming (mainly in Scala, affirmative it is my favorite language), I would also talk about technology in general, sport (particularly on Street lifting with training methods and statistical analyses) and anything else that comes to mind.Who Are You Writing For?I write for anyone on this planet who has a sense of curiosity and a thirst for learning. I really hope to be able to facilitate beginner developers to be more advanced in their early days. If you feel you’re being targeted by my sentences above, I welcome you!How Can They Get Involved?I am open to all constructive comments, especially in my writing, as I am just starting out. Anyone who desires to write an article on my blog is welcome and feel free to recommend new topics. We’ll all move forward together!","link":"/about/index.html"},{"title":"Project  Gallery","text":"A non-exhaustive list of open-source projects to which I have contributed.OrchaLang EditorA cloud-based IDE creates for the modeling and integration language Orcha.web application angular cliSee MoreClustering4EverA Big Data Clustering Library gathering clustering, unsupervized algorithms, and quality indices.scala spark data scienceSee MoreBreak-Out Scala.jsA simple reproduction of the break-out game made with Scala.js library.scala.js gameSee MoreThe Biggest Scala Cheat SheetA big (very big) cheat sheet on the basic notions of scala.scala cheat sheet notebookSee MoreAnt Colony SimulatorA simulation of an intelligent ant colony that search found in their environment.python simulation metaheuristicSee MoreScalaMazeA little library that implement some procedural maze generation algorithm in Scala.scala procedural generationSee More","link":"/projects/index.html"}],"posts":[{"title":"Deploying Scala.js app on Github Pages with Travis CI","text":"Today we are going to use Travis CI (free for an open-source repository) to deploy continuously a Scala.js app on Github pages. All your commit on the master branch put your static files on a gh-pages branch once the test is validated.Scala.js is a compiler that compiles Scala source code to equivalent Javascript code.Li Haoyi : http://www.lihaoyi.com/hands-on-scala-js/Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub.Wikipedia : https://en.wikipedia.org/wiki/Travis_CIPrerequisitesBefore following this tutorial, you need to download and install sbt and Node.js, and have an Github account.Create the projectRun the following command:1sbt new scala/hello-world.g8, and enter a name for your project. This creates a Scala project from the “hello-world” template.Setup Scala.jsIf you want to start from scratch without Scala.js project you can do this step.Create the file project/plugins.sbt, and add the following line to adding the Scala.js sbt plugin:1addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"0.6.29\")We also setup basic project settings and enable this plugin in the sbt build file. Add this following line in the build.sbt (in the project root directory) :12enablePlugins(ScalaJSPlugin)scalaJSUseMainModuleInitializer := trueTo run this, simply launch sbt and invoke the run task:1234567$ sbt run[info] Compilation completed in 9.96s.[info] Done compiling.[info] Fast optimizing D:\\drafs\\scala.js-travis-ci\\scala-travis\\target\\scala-2.13\\hello-world-fastopt.js[info] Running MainHello, World![success] (...)The run task creates the hello-world-fastopt.js in target\\scala-2.13\\ directory. Remember the name of the file for later.Integrating with HTMLTo load and launch the created JavaScript, you will need an HTML file.Create the folder source in the root directory of your project. You will put all your sources files (html, image, script, style) in this folder.Create the file source/index.html with the following content.1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Scala.js App&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- Include Scala.js compiled code --&gt; &lt;script type=\"text/javascript\" src=\"js/hello-world-fastopt.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Create the Github repositoryAdd .gitignore file in the root folder of your project, with the following content:123456789101112*.class*.log.cache/.history/.lib/dist/*target/lib_managed/src_managed/project/boot/project/plugins/project/And follow this tutorial to add an existing project to GitHub using the command line. Your repository should be public if you want to use Travis CI for free.Setup Travis CIIn this part, I use the free version of Travis CI.First, you need to add Travis CI application to your Github account.Generate a new token with repo scopes. Remember the token value for later.Go to Applications settings, and configure Travis CI to have access to the repository. You’ll be redirected to the Travis page.On the Travis page, go to your repository’s setting. Under Environment Variables, put GH_TOKEN as name and paste the token onto value. Click Add to save it.Earlier we created the source folder to place the static files of our app in it. To generate static files Travis CI copies the content of a public folder to the root of a project and commits it to the gh-pages branch. We will create a script to move our static files to a public folder.Add and commit deploy.sh file to your repository to generate static files on Travis CI with the following content:1234567891011121314if [ ! -d \"public\" ]; then mkdir publicficp -fr source/* public/if [ ! -d \"public/js\" ]; then mkdir public/jsfi# Generate .js files from Scalasbt fastOptJScp target/scala-*/*.js public/js/Add and commit .travis.yml file to your repository to configure Travis CI with the following content:123456789101112131415161718language: scalajdk: openjdk8scala: - 2.12.10 # scala version branches: only: - master # build master branch onlyscript: - bash deploy.sh # generate static filesdeploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN keep-history: true on: branch: master local-dir: publicOnce Travis CI finish the deployment, the generated pages can be found in the gh-pages branch of your repository.Your Scala.js App is deployed on Github Pages !In your GitHub repository setting, navigate to “GitHub Pages” section and change Source to gh-pages branch.Congratulations! Your Scala.js app is ready and available at username.github.io/repository-name. The Scala code:123object Main extends App { println(\"Hello, World!\")}a well executed (see console).You can find all the source code used in this tutorial here.To go furtherYou will go further in your projects than a simple “Hello World”. For more information on Scala.js, I invite you to consult the official documentation.Sources:https://www.scala-js.org/doc/tutorial/basic/index.htmlhttps://docs.travis-ci.com/user/languages/scala/https://docs.travis-ci.com/user/deployment/pages/","link":"/2019/11/08/deploying-scala-js-app-on-github-pages-with-travis-ci/"},{"title":"Hello World !","text":"Welcome to the launch of my new and 1st website! My name is Waris Radji and I’m so excited to share with you my knowledge! The amount of ideas, how-to’s and inspiration whirling around in my head is ready to jump out.Where can I find information about you?For additional information about me and why I am writing this blog, I encourage you to go to the about page. But to summarize, I will mainly write articles about my passions, Scala programming, Data Science and Street Lifting to cite some examples.How can I get involved?Feel free to take part in my journey by suggesting ideas for articles and even writing articles on my blog yourself, it will be a pleasure! Comments, donations, and sharing are also welcome!How can I be informed?To keep you informed of my future posts I invite you to follow me on my social networks (on the left) and even better on my newsletter (on the right) where you’ll be informed each week of my latest posts. Subscribers to my newsletter will be able to receive small gifts! Keep a close eye on your mailbox.","link":"/2019/10/31/hello/"},{"title":"Automatic & Targeted Instagram Mass Story Viewer","text":"Instagram influencers discovered a new way to increase their number of followers. This technique is called mass story viewing (or mass story looking). Have you ever seen Russian Instagram accounts with thousands of followers watching your insignificant stories?This method has become popular because contrary to follow-unfollow or spam comments, mass looking is not known to be very sanctioned by Instagram (Instagram can suspend or delete your account if there are suspicious activities).A real business has emerged around the mass story viewing. For example, I’ve seen a site that offers mass looking services for $155 per month. It’s very expensive and not accessible for everyone.Today we will see how to write a cheap (free) and accessible script for everyone (you still need to know how to program) using Python3 and its instabot library.User targetingBefore start, you need to connect instabot to your Instagram account with :123import instabotbot = instabot.Bot()bot.login(username=YOUR_USERNAME, password=YOUR_PASSWORD)Our first goal is to obtain a list of users who might potentially be interested in our content. There are many filter to target users on Instagram :by location:1bot.get_geotag_users(LOCATION)by hashtag:1bot.get_hashtag_users(HASHTAG)by a user followers:1bot.get_user_followers(USER_ID)All these methods return a list of the user ids targeted by the filter.Story viewinginstabot really makes story viewing easier with the method bot.watch_users_reels(USER_ID), which takes a user id as a parameter and returns a boolean that represents the success of the viewing.It’s therefore very easy to combine user targeting with story viewing taking the hashtag filter:12for id in bot.get_hashtag_users(\"hashtag\"): bot.watch_users_reels(id)I’ve written a complete script to target users for a clothing store, with a cool console display to impress your friend :12345678910111213141516171819202122232425262728293031323334353637383940import instabotimport timefrom os import system, name def clear(): if name == 'nt': _ = system('cls') else: _ = system('clear') HASHTAGS = ['fashion', 'style', \"model\", \"shopping\", \"dress\"]SLEEP_TIME_BETWEEN_MAIN_LOOP = 5 * 60SLEEP_TIME_BETWEEN_HASHTAG_LOOP = 60USERNAME = YOUR_USERNAMEPASSWORD = YOUR_PASSWORDbot = instabot.Bot()bot.login(username=USERNAME, password=PASSWORD)# MAIN LOOPwhile True: try: for hashtag in HASHTAGS : clear() # GET USERS FROM HASHTAG users = bot.get_hashtag_users(hashtag) for id in users: # WATCH USER STORIES if bot.watch_users_reels(id): bot.logger.info(f'Instagram user: {id}, Total stories viewed: {bot.total[\"stories_viewed\"]}') bot.logger.info(f'Sleeping for {SLEEP_TIME_BETWEEN_HASHTAG_LOOP} seconds...') time.sleep(SLEEP_TIME_BETWEEN_HASHTAG_LOOP) bot.logger.info(f'Sleeping for {SLEEP_TIME_BETWEEN_MAIN_LOOP} seconds...') time.sleep(SLEEP_TIME_BETWEEN_MAIN_LOOP) except Exception as e: bot.logger.info(e) time.sleep(SLEEP_TIME_BETWEEN_MAIN_LOOP)It’s a script that can run on a machine 24 hours a day, 7 days a week, to watch thousands upon thousands of stories and has rest periods to avoid detection of suspicious activity by Instagram. You can also use a proxy to avoid problems with your account.Very short article but I hope that it can save people from spending their money on mass looking through overpriced services…","link":"/2020/02/11/mass-story-viewer/"},{"title":"Name color from its RGB value","text":"Today we’re going to see how supervized learning model can help a machine to name color from its RGB value. The programming language used for the solution is Python.As you probably know, a color image is made up of pixels. Each pixel has a triplet value representing the values of red green and blue (RGB).Examples:RGB value red=250, green=128, blue=114, give:RGB value red=0, green=255, blue=255, give:Our human eye allows us to perceive and identify colors, and to say that the color seen above corresponds to pink or blue, but how the machine should know this with simple RGB value?When a human sees a color that is close to pure red, he will deduce that this color is red (I apologize for the colorblindness). Giving this behavior to a machine is simple: if I give him an RGB value (unnamed color), the machine can compare this color to colors already named, by finding the nearest color. It can deduce from this that the name of the unnamed color is the same that the name of the nearest color that it has found.Gathering data from sourcesThe first step before building the model is gathering data from sources. To the day I write this article CSS support 147 colors names, we can find the list of colors name on this website: https://www.rapidtables.com/web/css/css-color.html. On this website, each color is represented by his name and his RGB value.I created a small Python script that allows me to retrieve this data from the website. This article does not deal with Web scrapping, for more information about this, I invite you to read the official documentation of Beautifulsoup (the library that I use to collect data from the web page). You will find however the script I used to collect data, and you can also download the generated CSV file here.12345678910111213141516171819202122from bs4 import BeautifulSoupimport requestsimport jsondef parse_rgb(s): return s[3:][1:-1].replace('.', ',')def html_to_color(html): td_tags = html.find_all('td') return td_tags[1].text + ',' + parse_rgb(td_tags[3].text)req = requests.get('https://www.rapidtables.com/web/css/css-color.html')soup = BeautifulSoup(req.text, 'html')data = [html_to_color(line) for line in soup.find_all('tr') if not line.find('th') and len(line.find_all('td')) == 4]with open('colors.csv', 'w') as f: f.write('color_name,red,green,blue\\n' + '\\n'.join(data))Load and visualize dataNamed colors are now in the colors.csv file. pandas python library allows loading data from CSV to data frame with the read_csv function.123import pandas as pddf = pd.read_csv(\"colors.csv\")Display the 5 fist line of the data frame with df.head(5):Each color has a name and RGB value with a unique ID.An RGB value can be seen as a point (between 0 and 255) in a 3-dimensional space. To see this, we can use the Matplotlib data visualization library to represented on a 3D scatter plot each point of the data frame with his real color and with RGB value as axis.1234567891011121314151617181920212223242526from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as pltimport numpy as npfig = plt.figure(figsize=(15, 12))ax = fig.add_subplot(111, projection='3d')red_values = df.red.valuesgreen_values = df.green.valuesblue_values = df.blue.valuesfor i in range(len(red_values)): ax.scatter(red_values[i], green_values[i], blue_values[i], color=[(red_values[i] / 255, green_values[i] / 255, blue_values[i] / 255)], s=70) ax.set_xlabel('red')ax.set_ylabel('green')ax.set_zlabel('blue')ax.set_xticks([0, 85, 170, 255])ax.set_yticks([0, 85, 170, 255])ax.set_zticks([0, 85, 170, 255])plt.show()Choose the most appropriate modelThe last step before building a model is to choose which is the most appropriate to solve the problem. The goal is to give a name for an unnamed color finding the closest named color, what we can see as points in 3-dimensional space. We can also see each named colors as a unique category. Classification is the problem of identifying to which of a set categories a new observation belongs. For this problem, a category is a named color and unnamed colors are the new observations.The k-nearest neighbors (k-NN) algorithm perfectly match with the problem (find the closest point). k-NN is a supervised algorithm that stores all the available cases and classifies the new data or case based on a similarity measure. It is mostly used to classifies a data point based on how its neighbors are classified.In the classification phase, $k$ is a user-defined constant, and an unlabeled vector (a query or test point) is classified by assigning the label which is most frequent among the $k$ training samples nearest to that query point. If $k=1$, then the object is simply assigned to the class of that single nearest neighbor.Train the modelThe Python scikit-learn library implements the k-nearest neighbors for classification via the sklearn.neighbors.KNeighborsClassifier class. There are many parameters in this class but the only one that will interest us today is n_neighbors which represents the $k$ parameter and that we will set to 1.It is also necessary to retrieve the RGB values (X) from the data frame defined above, and the ID (y) of each color that will be the class to predict. These values will represent the training set.1234567from sklearn.neighbors import KNeighborsClassifierX = df[['red', 'green', 'blue']].valuesy = df.index.valuesmodel = KNeighborsClassifier(n_neighbors=1)model.fit(X, y)Use the model to name colorNow that the model has been trained it is possible to name new colors. I have created a function that takes as a parameter a triplet that represents a RGB value, and returns the name of that color. Simply call the predict method of the model which will take the tuple as a parameter, and return an ID from the data frame. Finally, we can ask the data frame to provide us with the name associated with the ID.12def name_color(rgb): return df.color_name[model.predict([rgb])].values[0]Examples:name_color((18, 47, 133)) give midnightbluename_color((102, 158, 30)) give olivedrabname_color((221, 145, 35)) give goldenrodConclusionWe have seen how supervised learning can help a machine to name colors from its RGB value. To make the model more accurate you can add new named colors to the training set. You can also have fun via this link http://www.darkart.com/cgi-bin/colors.cgi giving names to randomly generated colors. Soon I will be writing an article on unsupervised learning and color. In the meantime, thank you for reading this article, see you later!","link":"/2019/11/29/name-color-from-its-rgb-value/"},{"title":"Using Matplotlib with Scala on Jupyter Notebook (and more...)","text":"Data visualization is very important in the life of a data scientist. It helps him to explore data more intuitively than thousands of digital values and to communicate his ideas. Notebooks are very appreciative by data scientist because it ensures a perfect fusion between programming codes, data visualization, and explanatory texts.The Scala programming language is commonly used for Data engineering (building and maintaining data infrastructure) contrary to languages like Python and R used for Data Science (data processing and analysis). Even if is possible to do Data science with Scala (e.g. Spark MLLIB or Smile), it’s logic there are fewer data visualization libraries than in Python.When I search on Google for “data visualization Scala”, I very quickly find Vegas - The Missing Matplotlib for Scala.Hm… the first thing I see is “The Missing Matplotlib”? Even if Vegas is an excellent library and fits well with the functional part of Scala, the real Matplotlib offers more options, more documentation, and more community support than Vegas. What if I told you that you can directly use the real Matplotlib library with Scala.Note: The solution I will present to you below does not represent THE solution. You can use Scala libraries directly in your notebooks, but I am addressing here people who are familiar (like me) with using Matplotlib, but who prefer to do their processing with Scala.BeakerX - Extensions for Jupyter NotebookBeakerX is a collection of kernels and extensions to the Jupyter interactive computing environment. It provides JVM support, Spark cluster support, polyglot programming, interactive plots, tables, forms, publishing, and more.What will allow us to use Matplotlib with Scala today is BeakerX’s autotranslation functionality. This feature allowing you to access multiple languages in the same notebook (included Scala) and seamlessly communicate between them.The first step will be to install BeakerX (you need to have Jupyter Notebook before). Follow this link to see how to install it.When you create a new notebook, thanks to BeakerX, you will have a wider choice of kernels, make sure to choose the “Scala” option.To illustrate an example with Matplotlib, I will first create tables containing the states of the cosine and sine functions with Scala:12345import scala.math.{Pi, sin, cos}val x = 0.0 to 1.0 by 0.01val ySin = x.map(v =&gt; sin(v*Pi*5))val yCos = x.map(v =&gt; cos(v*Pi*5))The goal is now to transfer and autotranslate the Scala data to Python. For that, it is necessary to use the global object beakerx and assign to this the values:123beakerx.x = xbeakerx.y_sin = ySinbeakerx.y_cos = yCosNote: The values assigned to the beakerx object should only be some AnyVal of the Scala standard lib (Int, Float, Char, Double…) and collections (Map, List, Seq, Set, Range…) to ensure the success of autotranslation.Now that the data have been defined, it is Python’s turn to do the visualization. Just import the beakerx object into python with from beakerx.object import beakerx, and you will be able to access the attributes previously assigned. The magic %%python allows you to switch language:12345678%%pythonfrom beakerx.object import beakerximport numpy as npimport matplotlib.pyplot as pltfig, ax = plt.subplots()ax.plot(beakerx.x, beakerx.y_sin)ax.plot(beakerx.x, beakerx.y_cos)This is what the final result should look like:To go much furtherToday I used as an example Matplotlib, but it is possible to do the same with any Python library. Even better, it is possible not to limit yourself only to the Scala language, BeakerX supports also Groovy, Clojure, Kotlin, Java, JavaScript and SQL, and autotranslation works between all these languages. I think it’s a shame that BeakerX doesn’t support the R language.To switch between languages, you just have to use the magic %%languageName at the beginning of the cell concerned.","link":"/2019/12/14/using-scala-with-matplotlib/"}],"tags":[{"name":"scala.js","slug":"scala-js","link":"/tags/scala-js/"},{"name":"github pages","slug":"github-pages","link":"/tags/github-pages/"},{"name":"travis ci","slug":"travis-ci","link":"/tags/travis-ci/"},{"name":"scala.js tutorial","slug":"scala-js-tutorial","link":"/tags/scala-js-tutorial/"},{"name":"scala.js examples","slug":"scala-js-examples","link":"/tags/scala-js-examples/"},{"name":"compile scala to js","slug":"compile-scala-to-js","link":"/tags/compile-scala-to-js/"},{"name":"sbt","slug":"sbt","link":"/tags/sbt/"},{"name":"scala","slug":"scala","link":"/tags/scala/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"about me","slug":"about-me","link":"/tags/about-me/"},{"name":"waris radji","slug":"waris-radji","link":"/tags/waris-radji/"},{"name":"automation","slug":"automation","link":"/tags/automation/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"instagram","slug":"instagram","link":"/tags/instagram/"},{"name":"growth hacking","slug":"growth-hacking","link":"/tags/growth-hacking/"},{"name":"mass story viewer","slug":"mass-story-viewer","link":"/tags/mass-story-viewer/"},{"name":"mass looking","slug":"mass-looking","link":"/tags/mass-looking/"},{"name":"social network","slug":"social-network","link":"/tags/social-network/"},{"name":"bot","slug":"bot","link":"/tags/bot/"},{"name":"machine learning","slug":"machine-learning","link":"/tags/machine-learning/"},{"name":"data science","slug":"data-science","link":"/tags/data-science/"},{"name":"color","slug":"color","link":"/tags/color/"},{"name":"k nearest neighbors","slug":"k-nearest-neighbors","link":"/tags/k-nearest-neighbors/"},{"name":"data visualization","slug":"data-visualization","link":"/tags/data-visualization/"},{"name":"classification","slug":"classification","link":"/tags/classification/"},{"name":"matplotlib","slug":"matplotlib","link":"/tags/matplotlib/"},{"name":"jupyter notebook","slug":"jupyter-notebook","link":"/tags/jupyter-notebook/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Data Science","slug":"Data-Science","link":"/categories/Data-Science/"}]}